name: Build & Ship Installers
on: workflow_dispatch

env:
  # Easy way to set the node version
  NODE_VERSION: '18'

jobs:
  build_win:
    name: Windows build
    runs-on: windows-latest
    steps:
      - name: Clone repository (master branch)
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          ref: 'master'
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up build environment
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile
      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@fdb5b74adc1278ddb777dfed4c988b9d098bb48d # v1.2.1

      - name: Package Windows (x64)
        run: yarn package:win-x64
        #env:
        # CSC_LINK: ${{ secrets.WIN_CERT_2025_03_15 }}
        # CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS_2025_03_15 }}
      - name: Package Windows (arm64)
        run: yarn package:win-arm
        # env:
        # CSC_LINK: ${{ secrets.WIN_CERT_2025_03_15 }}
        # CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS_2025_03_15 }}
      - name: Build NSIS installer (x64)
        run: yarn release:win-x64
        # env:
        # CSC_LINK: ${{ secrets.WIN_CERT_2025_03_15 }}
        # CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS_2025_03_15 }}
      - name: Build NSIS installer (arm64)
        run: yarn release:win-arm
        # env:
        # CSC_LINK: ${{ secrets.WIN_CERT_2025_03_15 }}
        # CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS_2025_03_15 }}

      # Now we need to cache all artifacts. We create one artifact per build
      # step. It should be noted that "artifacts" are more like file shares.
      # Thus they can contain multiple files.
      - name: Cache installers
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4
        with:
          name: win32
          path: |
            ./release/LocalDevTools-${{steps.extract_version.outputs.version}}-x64.exe
            ./release/LocalDevTools-${{steps.extract_version.outputs.version}}-arm64.exe
  build_macos:
    name: macOS build
    runs-on: macos-latest
    steps:
      # Check out master for a regular release, or develop branch for a nightly
      - name: Clone repository (master branch)
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          ref: 'master'
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up build environment
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@fdb5b74adc1278ddb777dfed4c988b9d098bb48d # v1.2.1
      # Save the macOS certificate on this runner for forge to access it in the
      # next step below.
      - name: Retrieve code signing certificate
        run: chmod +x ./buildTools/install-appstore-cert.sh && ./buildTools/install-appstore-cert.sh
        env:
          MACOS_CERT: ${{ secrets.MACOS_CERT }}
          MACOS_CERT_PASS: ${{ secrets.MACOS_CERT_PASS }}
      # Now, finally build the app itself. This is done in four steps: First,
      # two steps make sure that the app is correctly bundled in ./out, then
      # the next two steps use electron builder to create the DMG files.
      # This step also signs and notarizes the app. NOTE that forge does this,
      # as we shall not notarize and/or sign the resulting DMG file as well!
      - name: Package macOS (arm64)
        run: yarn package:mac-arm
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      - name: Package macOS (x64)
        run: yarn package:mac-x64
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      # - name: Package macOS (Universal)
      #   run: yarn package:mac-universal
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      - name: Build macOS image file (arm64)
        run: yarn release:mac-arm
      - name: Build macOS image file (x64)
        run: yarn release:mac-x64
      # - name: Build macOS image file (Universal)
      #   run: yarn release:mac-universal
      # Finally upload both
      - name: Cache image files
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4
        with:
          name: darwin
          path: |
            ./release/LocalDevTools-${{steps.extract_version.outputs.version}}-x64.dmg
            ./release/LocalDevTools-${{steps.extract_version.outputs.version}}-arm64.dmg
  prepare_release:
    name: Prepare release draft
    # Make sure (and wait until) the builds have succeeded
    #needs: [build_win, build_macos, build_linux]
    needs: [build_win, build_macos]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          ref: 'master'
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Set up build environment
      #   run: yarn install --frozen-lockfile

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@fdb5b74adc1278ddb777dfed4c988b9d098bb48d # v1.2.1

      - name: Make release directory
        run: mkdir ./release
      # First, download all resulting assets from the previous steps.
      - name: Retrieve windows installers
        uses: actions/download-artifact@eaceaf801fd36c7dee90939fad912460b18a1ffe # v4
        with:
          name: win32
          path: ./release
      - name: Retrieve macOS images
        uses: actions/download-artifact@eaceaf801fd36c7dee90939fad912460b18a1ffe # v4
        with:
          name: darwin
          path: ./release
      # - name: Retrieve Linux installers
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: linux
      #     path: ./release

      - uses: BetaHuhn/do-spaces-action@cc9798e1e680662d6b7e4b65a3595469a5f59fd8 # v2
        with:
          access_key: ${{ secrets.SPACE_KEY}}
          secret_key: ${{ secrets.SPACE_SECRET_ACCESS_KEY }}
          space_name: ${{ secrets.SPACE_NAME }}
          out_dir: localDevTools/gr-hosting/${{steps.extract_version.outputs.version}}
          permission: public-read
          space_region: sfo3
          source: release

      # - uses: shallwefootball/s3-upload-action@master
      #   name: Upload to Store
      #   id: DOUpload
      #   with:
      #     aws_key_id: ${{ secrets.SPACE_KEY }}
      #     aws_secret_access_key: ${{ secrets.SPACE_SECRET_ACCESS_KEY}}
      #     aws_bucket: ${{ secrets.SPACE_NAME }}
      #     source_dir: 'release'
      #     destination_dir: 'localDevTools/gr-hosting/${{steps.extract_version.outputs.version}}'
