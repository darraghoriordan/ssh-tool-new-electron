345f383db025cff7450a09b9aa614d07
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GitProjectConfigFileParser_1 = require("./GitProjectConfigFileParser");
const GitProtocolTypeEnum_1 = require("../../services/gitConfigSystemScanner/models/GitProtocolTypeEnum");
const sampleGlobalConfig = `[user]
name = Darragh ORiordan
email = darragh@emailer.com
[core]
excludesfile = /Users/darragh/.gitignore_global
editor = nano -w
pager = diff-so-fancy | less --tabs=4 -RFX`;
const sampleSshConfig = `[core]
repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
ignorecase = true
precomposeunicode = true
[remote "origin"]
url = git@pgh:darraghoriordan/ssh-tool.git
fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
remote = origin
merge = refs/heads/master
[user]
name = Darragh ORiordan
email = darragh@emailer.com`;
describe('GitProjectConfigFileParser', () => {
    it('can parse global config', () => {
        const result = GitProjectConfigFileParser_1.GitProjectConfigFileParser.parseGitUser(sampleGlobalConfig);
        expect(result).toMatchObject({
            name: 'Darragh ORiordan',
            email: 'darragh@emailer.com',
        });
    });
    it('can parse ssh git config', () => {
        const result = GitProjectConfigFileParser_1.GitProjectConfigFileParser.parseGitProjectConfig(sampleSshConfig, '/Users/darragh/gitproject');
        expect(result).toMatchObject({
            originRepositoryFileName: 'ssh-tool',
            path: '/Users/darragh/gitproject',
            remotes: [
                {
                    owner: 'darraghoriordan',
                    pathname: '/darraghoriordan/ssh-tool.git',
                    port: undefined,
                    protocol: 'ssh',
                    remoteName: 'origin',
                    repoName: 'ssh-tool',
                    source: 'pgh',
                    type: GitProtocolTypeEnum_1.GitProtocolTypeEnum.SSH,
                    url: 'git@pgh:darraghoriordan/ssh-tool.git',
                    user: 'git',
                },
            ],
            user: {
                name: 'Darragh ORiordan',
                email: 'darragh@emailer.com',
            },
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhcnJhZ2hvcmlvcmRhbi9Eb2N1bWVudHMvcGVyc29uYWwtcHJvamVjdHMvc3NoLXRvb2wtbmV3LWVsZWN0cm9uL3NyYy9lbGVjdHJvbi9naXRDb25maWd1cmF0aW9ucy9zZXJ2aWNlcy9HaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkVBQXlFO0FBQ3pFLDBHQUFzRztBQUV0RyxNQUFNLGtCQUFrQixHQUFHOzs7Ozs7MkNBTWdCLENBQUE7QUFFM0MsTUFBTSxlQUFlLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs0QkFlSSxDQUFBO0FBQzVCLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtRQUNqQyxNQUFNLE1BQU0sR0FBRyx1REFBMEIsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUMxRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQzNCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLHFCQUFxQjtTQUM3QixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDbEMsTUFBTSxNQUFNLEdBQUcsdURBQTBCLENBQUMscUJBQXFCLENBQzdELGVBQWUsRUFDZiwyQkFBMkIsQ0FDNUIsQ0FBQTtRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDM0Isd0JBQXdCLEVBQUUsVUFBVTtZQUNwQyxJQUFJLEVBQUUsMkJBQTJCO1lBQ2pDLE9BQU8sRUFBRTtnQkFDUDtvQkFDRSxLQUFLLEVBQUUsaUJBQWlCO29CQUN4QixRQUFRLEVBQUUsK0JBQStCO29CQUN6QyxJQUFJLEVBQUUsU0FBUztvQkFDZixRQUFRLEVBQUUsS0FBSztvQkFDZixVQUFVLEVBQUUsUUFBUTtvQkFDcEIsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLE1BQU0sRUFBRSxLQUFLO29CQUNiLElBQUksRUFBRSx5Q0FBbUIsQ0FBQyxHQUFHO29CQUM3QixHQUFHLEVBQUUsc0NBQXNDO29CQUMzQyxJQUFJLEVBQUUsS0FBSztpQkFDWjthQUNGO1lBQ0QsSUFBSSxFQUFFO2dCQUNKLElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLEtBQUssRUFBRSxxQkFBcUI7YUFDN0I7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXJyYWdob3Jpb3JkYW4vRG9jdW1lbnRzL3BlcnNvbmFsLXByb2plY3RzL3NzaC10b29sLW5ldy1lbGVjdHJvbi9zcmMvZWxlY3Ryb24vZ2l0Q29uZmlndXJhdGlvbnMvc2VydmljZXMvR2l0UHJvamVjdENvbmZpZ0ZpbGVQYXJzZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlciB9IGZyb20gJy4vR2l0UHJvamVjdENvbmZpZ0ZpbGVQYXJzZXInXG5pbXBvcnQgeyBHaXRQcm90b2NvbFR5cGVFbnVtIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZ2l0Q29uZmlnU3lzdGVtU2Nhbm5lci9tb2RlbHMvR2l0UHJvdG9jb2xUeXBlRW51bSdcblxuY29uc3Qgc2FtcGxlR2xvYmFsQ29uZmlnID0gYFt1c2VyXVxubmFtZSA9IERhcnJhZ2ggT1Jpb3JkYW5cbmVtYWlsID0gZGFycmFnaEBlbWFpbGVyLmNvbVxuW2NvcmVdXG5leGNsdWRlc2ZpbGUgPSAvVXNlcnMvZGFycmFnaC8uZ2l0aWdub3JlX2dsb2JhbFxuZWRpdG9yID0gbmFubyAtd1xucGFnZXIgPSBkaWZmLXNvLWZhbmN5IHwgbGVzcyAtLXRhYnM9NCAtUkZYYFxuXG5jb25zdCBzYW1wbGVTc2hDb25maWcgPSBgW2NvcmVdXG5yZXBvc2l0b3J5Zm9ybWF0dmVyc2lvbiA9IDBcbmZpbGVtb2RlID0gdHJ1ZVxuYmFyZSA9IGZhbHNlXG5sb2dhbGxyZWZ1cGRhdGVzID0gdHJ1ZVxuaWdub3JlY2FzZSA9IHRydWVcbnByZWNvbXBvc2V1bmljb2RlID0gdHJ1ZVxuW3JlbW90ZSBcIm9yaWdpblwiXVxudXJsID0gZ2l0QHBnaDpkYXJyYWdob3Jpb3JkYW4vc3NoLXRvb2wuZ2l0XG5mZXRjaCA9ICtyZWZzL2hlYWRzLyo6cmVmcy9yZW1vdGVzL29yaWdpbi8qXG5bYnJhbmNoIFwibWFzdGVyXCJdXG5yZW1vdGUgPSBvcmlnaW5cbm1lcmdlID0gcmVmcy9oZWFkcy9tYXN0ZXJcblt1c2VyXVxubmFtZSA9IERhcnJhZ2ggT1Jpb3JkYW5cbmVtYWlsID0gZGFycmFnaEBlbWFpbGVyLmNvbWBcbmRlc2NyaWJlKCdHaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlcicsICgpID0+IHtcbiAgaXQoJ2NhbiBwYXJzZSBnbG9iYWwgY29uZmlnJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IEdpdFByb2plY3RDb25maWdGaWxlUGFyc2VyLnBhcnNlR2l0VXNlcihzYW1wbGVHbG9iYWxDb25maWcpXG4gICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdCh7XG4gICAgICBuYW1lOiAnRGFycmFnaCBPUmlvcmRhbicsXG4gICAgICBlbWFpbDogJ2RhcnJhZ2hAZW1haWxlci5jb20nLFxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2NhbiBwYXJzZSBzc2ggZ2l0IGNvbmZpZycsICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBHaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlci5wYXJzZUdpdFByb2plY3RDb25maWcoXG4gICAgICBzYW1wbGVTc2hDb25maWcsXG4gICAgICAnL1VzZXJzL2RhcnJhZ2gvZ2l0cHJvamVjdCdcbiAgICApXG4gICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdCh7XG4gICAgICBvcmlnaW5SZXBvc2l0b3J5RmlsZU5hbWU6ICdzc2gtdG9vbCcsXG4gICAgICBwYXRoOiAnL1VzZXJzL2RhcnJhZ2gvZ2l0cHJvamVjdCcsXG4gICAgICByZW1vdGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBvd25lcjogJ2RhcnJhZ2hvcmlvcmRhbicsXG4gICAgICAgICAgcGF0aG5hbWU6ICcvZGFycmFnaG9yaW9yZGFuL3NzaC10b29sLmdpdCcsXG4gICAgICAgICAgcG9ydDogdW5kZWZpbmVkLFxuICAgICAgICAgIHByb3RvY29sOiAnc3NoJyxcbiAgICAgICAgICByZW1vdGVOYW1lOiAnb3JpZ2luJyxcbiAgICAgICAgICByZXBvTmFtZTogJ3NzaC10b29sJyxcbiAgICAgICAgICBzb3VyY2U6ICdwZ2gnLFxuICAgICAgICAgIHR5cGU6IEdpdFByb3RvY29sVHlwZUVudW0uU1NILFxuICAgICAgICAgIHVybDogJ2dpdEBwZ2g6ZGFycmFnaG9yaW9yZGFuL3NzaC10b29sLmdpdCcsXG4gICAgICAgICAgdXNlcjogJ2dpdCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdXNlcjoge1xuICAgICAgICBuYW1lOiAnRGFycmFnaCBPUmlvcmRhbicsXG4gICAgICAgIGVtYWlsOiAnZGFycmFnaEBlbWFpbGVyLmNvbScsXG4gICAgICB9LFxuICAgIH0pXG4gIH0pXG59KVxuIl0sInZlcnNpb24iOjN9