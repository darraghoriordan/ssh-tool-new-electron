{"file":"/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/channels/GitConfigFilesListSub.ts","mappings":";;;;;;;;;;;;;;;AACA,wGAA+E;AAE/E,mEAA+D;AAE/D,oGAAgG;AAChG,qFAAiF;AAGjF,MAAa,qBACX,SAAQ,6CAAqB;IAGvB,MAAM;IACV,6DAA6D;IAC7D,KAAmB;IACnB,6DAA6D;IAC7D,OAAa;;YAEb,MAAM,QAAQ,GAAG,MAAM,qDAAyB,CAAC,WAAW,EAAE,CAAA;YAE9D,MAAM,QAAQ,GAA0B;gBACtC,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE,QAAQ,CAAC,YAAY;gBACnC,UAAU,EAAE,SAAS;aACtB,CAAA;YACD,kCAAkC;YAClC,IAAI,SAAS,GAAG,MAAM,qDAAyB,CAAC,QAAQ,EAAE,CAAA;YAE1D,IAAI,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,CAAC,MAAM,KAAI,CAAC,EAAE;gBACrC,2BAA2B;gBAC3B,OAAO,CAAC,GAAG,CACT,oBAAoB,QAAQ,CAAC,YAAY,2BAA2B,CACrE,CAAA;gBACD,SAAS,GAAG,MAAM,oCAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;gBACxE,+BAA+B;gBAC/B,MAAM,qDAAyB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;aACpD;YACD,0CAA0C;YAC1C,QAAQ,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAA;YAC1C,QAAQ,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAA;YAE1C,OAAO,QAAQ,CAAA;QACjB,CAAC;KAAA;IAED,YAAY,CAAC,SAAsC;;QACjD,OAAO,CAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,0CAAE,MAAM,KAAI,CAAC,CAAA;IAC3C,CAAC;CACF;AAvCD,sDAuCC","names":[],"sources":["/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/channels/GitConfigFilesListSub.ts"],"sourcesContent":["import { IpcMainEvent } from 'electron'\nimport GitConfigFileSystemScanner from '../services/GitConfigFileSystemScanner'\nimport { IIpcMainInvokeEventSub } from '../../IpcChannelTypes/IIpcMainInvokeEventSub'\nimport { GitConfigFilesListPub } from './GitConfigFilesListPub'\nimport { GitConfigListResponse } from './MessageTypes'\nimport { ApplicationSettingService } from '../../appSettings/services/ApplicationSettingService'\nimport { GitConfigFileCacheService } from '../services/GitConfigFileCacheService'\nimport { GitConfigFileListCacheModel } from '../models/GitConfigFileListCacheModel'\n\nexport class GitConfigFilesListSub\n  extends GitConfigFilesListPub\n  implements IIpcMainInvokeEventSub<void, GitConfigListResponse>\n{\n  async handle(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    event: IpcMainEvent,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request: void\n  ): Promise<GitConfigListResponse> {\n    const settings = await ApplicationSettingService.getSettings()\n\n    const response: GitConfigListResponse = {\n      configList: [],\n      searchedPath: settings.projectsPath,\n      globalUser: undefined,\n    }\n    // try to find data in cache first\n    let cacheData = await GitConfigFileCacheService.loadFile()\n\n    if (cacheData?.configList.length <= 0) {\n      // scan the system for data\n      console.log(\n        `Scanning system (${settings.projectsPath}) for git config files...`\n      )\n      cacheData = await GitConfigFileSystemScanner.scan(settings.projectsPath)\n      // cache the data for next time\n      await GitConfigFileCacheService.saveFile(cacheData)\n    }\n    // map the data to a response for renderer\n    response.configList = cacheData.configList\n    response.globalUser = cacheData.globalUser\n\n    return response\n  }\n\n  shouldRescan(cacheData: GitConfigFileListCacheModel): boolean {\n    return cacheData?.configList?.length <= 0\n  }\n}\n"],"version":3}