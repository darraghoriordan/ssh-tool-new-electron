{"file":"/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/services/sshConfigFile/SshConfigFileParser.ts","mappings":"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","names":[],"sources":["/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/services/sshConfigFile/SshConfigFileParser.ts"],"sourcesContent":["import { SshConfigFileLine } from './SshConfigFileLine'\nexport class AvailableHost {\n  alias!: string\n  user!: string\n  destination!: string\n}\nexport class SshConfigFileParser {\n  public static parse(rawFile: string): SshConfigFileLine[] {\n    const parsedLines = rawFile\n      .split(/\\r?\\n/)\n      .map((line: string, index: number) => {\n        return this.parseSingleLine(line, index)\n      })\n\n    return parsedLines\n  }\n\n  public static parseValidSshHosts(rawFile: string): AvailableHost[] {\n    const parsedLines = rawFile\n      .split(/\\r?\\n/)\n      .map((line: string, index: number) => {\n        return this.parseSingleLine(line, index)\n      })\n    console.log('Parsed ssh config file lines: ', parsedLines.length)\n    return this.parseSshHosts(parsedLines)\n  }\n\n  public static parseSshHosts(lines: SshConfigFileLine[]): AvailableHost[] {\n    // end state is 1 or more valid git ssh profiles\n    // start states are no, or empty ssh config\n    // existing config but no git config\n    // existing git configs\n\n    // first try to find existing configs\n    const availableHosts = []\n    let currentAvailableHost: AvailableHost | undefined\n    for (const line of lines) {\n      if (line.commandKey === 'Host') {\n        // check if we have completely parsed a previous host\n        if (currentAvailableHost) {\n          availableHosts.push({ ...currentAvailableHost })\n          currentAvailableHost = undefined\n        }\n        currentAvailableHost = new AvailableHost()\n        currentAvailableHost.alias = line.commandValue\n        continue\n      }\n      if (!currentAvailableHost) {\n        // we haven't hit a host line yet\n        continue\n      }\n      if (line.commandKey === 'User') {\n        currentAvailableHost.user = line.commandValue\n        continue\n      }\n      if (line.commandKey === 'HostName') {\n        currentAvailableHost.destination = line.commandValue\n        continue\n      }\n    }\n    return availableHosts\n  }\n\n  public static parseSingleLine(\n    rawLine: string,\n    lineNumber: number\n  ): SshConfigFileLine {\n    const parsedLine = new SshConfigFileLine(rawLine, lineNumber)\n\n    // remove all the whitespace\n    const trimmedLine = parsedLine.rawString.trim()\n\n    // is it an empty line?\n    if (trimmedLine === '') {\n      parsedLine.isEmptyLine = true\n      return parsedLine\n    }\n\n    // is it a comment?\n    if (trimmedLine.startsWith('#')) {\n      parsedLine.isCommented = true\n      return parsedLine\n    }\n    // can we split it to get key and value?\n    const lineKey = trimmedLine.substring(0, trimmedLine.indexOf(' '))\n    const lineValue = trimmedLine.substring(trimmedLine.indexOf(' ') + 1)\n\n    // validate the parsing\n    if (\n      !lineKey ||\n      lineKey.length === 0 ||\n      !lineValue ||\n      lineValue.length === 0\n    ) {\n      parsedLine.isParsedSuccessfully = false\n      return parsedLine\n    }\n\n    parsedLine.isParsedSuccessfully = true\n    parsedLine.commandKey = lineKey\n    parsedLine.commandValue = lineValue\n\n    return parsedLine\n  }\n}\n"],"version":3}