779e71d3dd9da23757652b9fc4a4de80
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitConfigFileCacheService = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const electron_1 = require("electron");
const class_transformer_1 = require("class-transformer");
const GitConfigFileListCacheModel_1 = require("../models/GitConfigFileListCacheModel");
class GitConfigFileCacheService {
    static loadFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const buffer = yield promises_1.default.readFile(GitConfigFileCacheService.gitConfigCachePath);
                return GitConfigFileCacheService.transformToInstance(buffer.toString());
            }
            catch (error) {
                console.log(`Error when reading file ${GitConfigFileCacheService.gitConfigCachePath}. Will return new instance instead.`, error);
                const emptyResult = new GitConfigFileListCacheModel_1.GitConfigFileListCacheModel();
                emptyResult.configList = [];
                return emptyResult;
            }
        });
    }
    static transformToInstance(rawObject) {
        const settingsInstance = (0, class_transformer_1.plainToInstance)(GitConfigFileListCacheModel_1.GitConfigFileListCacheModel, JSON.parse(rawObject));
        return settingsInstance;
    }
    static saveFile(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return promises_1.default.writeFile(GitConfigFileCacheService.gitConfigCachePath, JSON.stringify((0, class_transformer_1.instanceToPlain)(data)));
        });
    }
    static deleteFile() {
        return __awaiter(this, void 0, void 0, function* () {
            return promises_1.default.rm(GitConfigFileCacheService.gitConfigCachePath, { force: true });
        });
    }
}
exports.GitConfigFileCacheService = GitConfigFileCacheService;
GitConfigFileCacheService.gitConfigCachePath = path_1.default.join(electron_1.app.getPath('userData'), 'gitConfigurationCache.json');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhcnJhZ2hvcmlvcmRhbi9Eb2N1bWVudHMvcGVyc29uYWwtcHJvamVjdHMvc3NoLXRvb2wtbmV3LWVsZWN0cm9uL3NyYy9lbGVjdHJvbi9naXRDb25maWd1cmF0aW9ucy9zZXJ2aWNlcy9HaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJEQUE2QjtBQUM3QixnREFBdUI7QUFDdkIsdUNBQThCO0FBQzlCLHlEQUFvRTtBQUNwRSx1RkFBbUY7QUFFbkYsTUFBYSx5QkFBeUI7SUFLcEMsTUFBTSxDQUFPLFFBQVE7O1lBQ25CLElBQUk7Z0JBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBRyxDQUFDLFFBQVEsQ0FDL0IseUJBQXlCLENBQUMsa0JBQWtCLENBQzdDLENBQUE7Z0JBRUQsT0FBTyx5QkFBeUIsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTthQUN4RTtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxHQUFHLENBQ1QsMkJBQTJCLHlCQUF5QixDQUFDLGtCQUFrQixxQ0FBcUMsRUFDNUcsS0FBSyxDQUNOLENBQUE7Z0JBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSx5REFBMkIsRUFBRSxDQUFBO2dCQUNyRCxXQUFXLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQTtnQkFDM0IsT0FBTyxXQUFXLENBQUE7YUFDbkI7UUFDSCxDQUFDO0tBQUE7SUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBaUI7UUFDMUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFBLG1DQUFlLEVBQ3RDLHlEQUEyQixFQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUN0QixDQUFBO1FBQ0QsT0FBTyxnQkFBZ0IsQ0FBQTtJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFPLFFBQVEsQ0FBQyxJQUFpQzs7WUFDckQsT0FBTyxrQkFBRyxDQUFDLFNBQVMsQ0FDbEIseUJBQXlCLENBQUMsa0JBQWtCLEVBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBQSxtQ0FBZSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQ3RDLENBQUE7UUFDSCxDQUFDO0tBQUE7SUFFRCxNQUFNLENBQU8sVUFBVTs7WUFDckIsT0FBTyxrQkFBRyxDQUFDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQzlFLENBQUM7S0FBQTs7QUF4Q0gsOERBeUNDO0FBeENnQiw0Q0FBa0IsR0FBVyxjQUFJLENBQUMsSUFBSSxDQUNuRCxjQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUN2Qiw0QkFBNEIsQ0FDN0IsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGFycmFnaG9yaW9yZGFuL0RvY3VtZW50cy9wZXJzb25hbC1wcm9qZWN0cy9zc2gtdG9vbC1uZXctZWxlY3Ryb24vc3JjL2VsZWN0cm9uL2dpdENvbmZpZ3VyYXRpb25zL3NlcnZpY2VzL0dpdENvbmZpZ0ZpbGVDYWNoZVNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBhcHAgfSBmcm9tICdlbGVjdHJvbidcbmltcG9ydCB7IGluc3RhbmNlVG9QbGFpbiwgcGxhaW5Ub0luc3RhbmNlIH0gZnJvbSAnY2xhc3MtdHJhbnNmb3JtZXInXG5pbXBvcnQgeyBHaXRDb25maWdGaWxlTGlzdENhY2hlTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvR2l0Q29uZmlnRmlsZUxpc3RDYWNoZU1vZGVsJ1xuXG5leHBvcnQgY2xhc3MgR2l0Q29uZmlnRmlsZUNhY2hlU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIGdpdENvbmZpZ0NhY2hlUGF0aDogc3RyaW5nID0gcGF0aC5qb2luKFxuICAgIGFwcC5nZXRQYXRoKCd1c2VyRGF0YScpLFxuICAgICdnaXRDb25maWd1cmF0aW9uQ2FjaGUuanNvbidcbiAgKVxuICBzdGF0aWMgYXN5bmMgbG9hZEZpbGUoKTogUHJvbWlzZTxHaXRDb25maWdGaWxlTGlzdENhY2hlTW9kZWw+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgZnNwLnJlYWRGaWxlKFxuICAgICAgICBHaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLmdpdENvbmZpZ0NhY2hlUGF0aFxuICAgICAgKVxuXG4gICAgICByZXR1cm4gR2l0Q29uZmlnRmlsZUNhY2hlU2VydmljZS50cmFuc2Zvcm1Ub0luc3RhbmNlKGJ1ZmZlci50b1N0cmluZygpKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYEVycm9yIHdoZW4gcmVhZGluZyBmaWxlICR7R2l0Q29uZmlnRmlsZUNhY2hlU2VydmljZS5naXRDb25maWdDYWNoZVBhdGh9LiBXaWxsIHJldHVybiBuZXcgaW5zdGFuY2UgaW5zdGVhZC5gLFxuICAgICAgICBlcnJvclxuICAgICAgKVxuICAgICAgY29uc3QgZW1wdHlSZXN1bHQgPSBuZXcgR2l0Q29uZmlnRmlsZUxpc3RDYWNoZU1vZGVsKClcbiAgICAgIGVtcHR5UmVzdWx0LmNvbmZpZ0xpc3QgPSBbXVxuICAgICAgcmV0dXJuIGVtcHR5UmVzdWx0XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRyYW5zZm9ybVRvSW5zdGFuY2UocmF3T2JqZWN0OiBzdHJpbmcpOiBHaXRDb25maWdGaWxlTGlzdENhY2hlTW9kZWwge1xuICAgIGNvbnN0IHNldHRpbmdzSW5zdGFuY2UgPSBwbGFpblRvSW5zdGFuY2UoXG4gICAgICBHaXRDb25maWdGaWxlTGlzdENhY2hlTW9kZWwsXG4gICAgICBKU09OLnBhcnNlKHJhd09iamVjdClcbiAgICApXG4gICAgcmV0dXJuIHNldHRpbmdzSW5zdGFuY2VcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBzYXZlRmlsZShkYXRhOiBHaXRDb25maWdGaWxlTGlzdENhY2hlTW9kZWwpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gZnNwLndyaXRlRmlsZShcbiAgICAgIEdpdENvbmZpZ0ZpbGVDYWNoZVNlcnZpY2UuZ2l0Q29uZmlnQ2FjaGVQYXRoLFxuICAgICAgSlNPTi5zdHJpbmdpZnkoaW5zdGFuY2VUb1BsYWluKGRhdGEpKVxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBkZWxldGVGaWxlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBmc3Aucm0oR2l0Q29uZmlnRmlsZUNhY2hlU2VydmljZS5naXRDb25maWdDYWNoZVBhdGgsIHsgZm9yY2U6IHRydWUgfSlcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9