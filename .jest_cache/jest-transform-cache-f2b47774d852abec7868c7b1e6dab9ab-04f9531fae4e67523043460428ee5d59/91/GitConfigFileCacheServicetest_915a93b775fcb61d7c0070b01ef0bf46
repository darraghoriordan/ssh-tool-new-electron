2272c5c412f507f9650085d9531c88c6
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GitConfigFileCacheService_1 = require("./GitConfigFileCacheService");
describe('GitConfigFileCacheService', () => {
    it('is an expected response', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = GitConfigFileCacheService_1.GitConfigFileCacheService.transformToInstance('{}');
        expect(result.constructor.name).toEqual('GitConfigFileListCacheModel');
        // This test is broken
        // need to add a correct test string to the method call above
        expect(result).toBeUndefined();
        // then need to change assertion to check for parsed items
        // expect(result.configList.length).toEqual(2)
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhcnJhZ2hvcmlvcmRhbi9Eb2N1bWVudHMvcGVyc29uYWwtcHJvamVjdHMvc3NoLXRvb2wtbmV3LWVsZWN0cm9uL3NyYy9lbGVjdHJvbi9naXRDb25maWd1cmF0aW9ucy9zZXJ2aWNlcy9HaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSwyRUFBdUU7QUFFdkUsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN6QyxFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBUyxFQUFFO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLHFEQUF5QixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2xFLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO1FBQ3RFLHNCQUFzQjtRQUN0Qiw2REFBNkQ7UUFDN0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQzlCLDBEQUEwRDtRQUMxRCw4Q0FBOEM7SUFDaEQsQ0FBQyxDQUFBLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXJyYWdob3Jpb3JkYW4vRG9jdW1lbnRzL3BlcnNvbmFsLXByb2plY3RzL3NzaC10b29sLW5ldy1lbGVjdHJvbi9zcmMvZWxlY3Ryb24vZ2l0Q29uZmlndXJhdGlvbnMvc2VydmljZXMvR2l0Q29uZmlnRmlsZUNhY2hlU2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdpdENvbmZpZ0ZpbGVDYWNoZVNlcnZpY2UgfSBmcm9tICcuL0dpdENvbmZpZ0ZpbGVDYWNoZVNlcnZpY2UnXG5cbmRlc2NyaWJlKCdHaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlJywgKCkgPT4ge1xuICBpdCgnaXMgYW4gZXhwZWN0ZWQgcmVzcG9uc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gR2l0Q29uZmlnRmlsZUNhY2hlU2VydmljZS50cmFuc2Zvcm1Ub0luc3RhbmNlKCd7fScpXG4gICAgZXhwZWN0KHJlc3VsdC5jb25zdHJ1Y3Rvci5uYW1lKS50b0VxdWFsKCdHaXRDb25maWdGaWxlTGlzdENhY2hlTW9kZWwnKVxuICAgIC8vIFRoaXMgdGVzdCBpcyBicm9rZW5cbiAgICAvLyBuZWVkIHRvIGFkZCBhIGNvcnJlY3QgdGVzdCBzdHJpbmcgdG8gdGhlIG1ldGhvZCBjYWxsIGFib3ZlXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZVVuZGVmaW5lZCgpXG4gICAgLy8gdGhlbiBuZWVkIHRvIGNoYW5nZSBhc3NlcnRpb24gdG8gY2hlY2sgZm9yIHBhcnNlZCBpdGVtc1xuICAgIC8vIGV4cGVjdChyZXN1bHQuY29uZmlnTGlzdC5sZW5ndGgpLnRvRXF1YWwoMilcbiAgfSlcbn0pXG4iXSwidmVyc2lvbiI6M30=