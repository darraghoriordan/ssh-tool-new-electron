398e39483769d59a60a3a1bf649ff1d2
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitProjectConfigFileParser = void 0;
const GitRemote_1 = require("../../services/gitConfigSystemScanner/models/GitRemote");
const GitProtocolTypeEnum_1 = require("../../services/gitConfigSystemScanner/models/GitProtocolTypeEnum");
const ini_1 = __importDefault(require("ini"));
const git_url_parse_1 = __importDefault(require("git-url-parse"));
class GitProjectConfigFileParser {
    static parseGitUser(rawFile) {
        var _a, _b;
        const parsedGlobal = ini_1.default.parse(rawFile);
        return {
            name: (_a = parsedGlobal.user) === null || _a === void 0 ? void 0 : _a.name,
            email: (_b = parsedGlobal.user) === null || _b === void 0 ? void 0 : _b.email,
        };
    }
    static parseGitProjectConfig(rawFile, filePath, namedSshConnections) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const parsedIniFile = ini_1.default.parse(rawFile);
            const remotesKeys = GitProjectConfigFileParser.filteredKeys(parsedIniFile, /^remote /);
            const result = {
                path: filePath,
                potentialOrigins: [],
                id: Buffer.from(filePath).toString('base64'),
                remotes: remotesKeys.map(remoteNameKey => {
                    const rawUrl = parsedIniFile[remoteNameKey].url;
                    const parsedUrl = (0, git_url_parse_1.default)(rawUrl);
                    const urlType = this.parseUrlType(parsedUrl.protocol);
                    const remoteName = remoteNameKey
                        // eslint-disable-next-line no-useless-escape
                        .replace(/remote "/, '')
                        .trim()
                        // eslint-disable-next-line no-useless-escape
                        .replace(/"/, '');
                    const remote = new GitRemote_1.GitRemote();
                    remote.url = rawUrl;
                    remote.owner = parsedUrl.owner;
                    remote.pathname = parsedUrl.pathname;
                    remote.protocol = parsedUrl.protocol;
                    remote.source = parsedUrl.source;
                    remote.port = parsedUrl.port || undefined;
                    remote.user = parsedUrl.user;
                    remote.repoName = parsedUrl.name;
                    remote.remoteName = remoteName;
                    remote.type = urlType;
                    return remote;
                }),
                user: {
                    email: (_a = parsedIniFile.user) === null || _a === void 0 ? void 0 : _a.email,
                    name: (_b = parsedIniFile.user) === null || _b === void 0 ? void 0 : _b.name,
                },
            };
            result.originRepositoryFileName = this.extractOriginGitRepoName(result);
            try {
                const possibleRemotes = this.findPotentialRemoteOrigins(result, namedSshConnections);
                result.potentialOrigins = possibleRemotes;
            }
            catch (error) {
                console.warn("Couldn't find a remote", result.path);
            }
            return result;
        });
    }
    static findPotentialRemoteOrigins(gitConfigInfo, listOfNamedSshConnections) {
        // grab the single origin
        console.info(`Mapping ${listOfNamedSshConnections.length} named connections`);
        const originRemote = gitConfigInfo.remotes.find(x => x.remoteName.includes('origin'));
        // we can't change the origin if there isnt one already set
        // but then maybe the customer will want to set one using the app?
        // edit, no because you cant set origin with knowing base url, unless
        // we offer a list of all potential ssh connections
        if (!originRemote) {
            return [];
        }
        // for each config create ssh connections for each ssh certificate
        // if ssh then for each connection add a potential http connection
        // if ssh remove the existing named connection if in use
        // if http then remove the potential http connection
        // this needs a git remote connection
        const mappedSshHostsToGitRemotes = listOfNamedSshConnections.map(x => {
            return {
                url: `${x.user}@${x.alias}:${originRemote.pathname.substring(1)}`,
                owner: originRemote.owner,
                pathname: originRemote.pathname,
                protocol: 'ssh',
                source: originRemote.source,
                port: undefined,
                user: x.user,
                repoName: originRemote.repoName,
                remoteName: originRemote.remoteName,
                type: GitProtocolTypeEnum_1.GitProtocolTypeEnum.SSH,
            };
        });
        return mappedSshHostsToGitRemotes;
    }
    static extractOriginGitRepoName(gitConfigInfo) {
        const unknownRepoTitle = 'Unknown Remote Origin';
        const originRemote = gitConfigInfo.remotes.find(x => x.remoteName.includes('origin'));
        if (originRemote === undefined) {
            return unknownRepoTitle;
        }
        return originRemote.repoName || unknownRepoTitle;
    }
    static parseUrlType(protocol) {
        switch (protocol) {
            case 'ssh':
                return GitProtocolTypeEnum_1.GitProtocolTypeEnum.SSH;
            case 'http':
            case 'https':
                return GitProtocolTypeEnum_1.GitProtocolTypeEnum.HTTP;
            default:
                return GitProtocolTypeEnum_1.GitProtocolTypeEnum.UNKNOWN;
        }
    }
}
exports.GitProjectConfigFileParser = GitProjectConfigFileParser;
// eslint-disable-next-line @typescript-eslint/ban-types
GitProjectConfigFileParser.filteredKeys = (obj, filter) => {
    const keys = [];
    for (const key in obj)
        if (Object.prototype.hasOwnProperty.call(obj, key) && filter.test(key)) {
            keys.push(key);
        }
    return keys;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,