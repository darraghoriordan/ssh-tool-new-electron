{"file":"/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/services/GitConfigFileSystemScanner.ts","mappings":"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","names":[],"sources":["/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/services/GitConfigFileSystemScanner.ts"],"sourcesContent":["import fs from 'fs'\nimport { GitConfigPathToFilePathMapper } from './GitConfigPathToFilePathMapper'\nimport fsp from 'fs/promises'\nimport { spawnPromise } from '../../services/PromisifiedNodeUtilities/SpawnPromise'\nimport { GitProjectConfigFileParser } from './GitProjectConfigFileParser'\nimport { GitConfigInfo } from '../../services/gitConfigSystemScanner/models/GitConfigInfo'\nimport { ApplicationSettingService } from '../../appSettings/services/ApplicationSettingService'\nimport { GitConfigFileListCacheModel } from '../models/GitConfigFileListCacheModel'\nimport { app } from 'electron'\n\nexport default class GitConfigFileSystemScanner {\n  static async scan(\n    scanStartPath: string\n  ): Promise<GitConfigFileListCacheModel> {\n    const settings = await ApplicationSettingService.getSettings()\n\n    const response: GitConfigFileListCacheModel = {\n      configList: [],\n      globalUser: undefined,\n    }\n    // check project path exists\n    if (!fs.existsSync(scanStartPath)) {\n      throw new Error(\n        `Git Config file project directory not found (${scanStartPath})`\n      )\n    }\n    // scan the project path for matching config files\n    const gitConfigFilePaths =\n      await GitConfigFileSystemScanner.getListOfPathsToGitConfigFiles(\n        scanStartPath,\n        app.getPath('home'),\n        settings.globalGitConfigFile\n      )\n\n    // create promises for each file to get the contents\n    const fileReadPromises = gitConfigFilePaths.map(fInfo => {\n      return fsp.readFile(fInfo)\n    })\n\n    // run all the promises to read file input\n    const results = await Promise.allSettled(fileReadPromises)\n\n    // parse the user from the global config file as a special case\n    if (results[0].status === 'fulfilled') {\n      response.globalUser = GitProjectConfigFileParser.parseGitUser(\n        results[0].value.toString()\n      )\n    }\n\n    // parse all the project files skipping the first because it's\n    // the global config, also add that offset to the file paths\n    // in the response\n    const GLOBAL_CONFIG_OFFSET = 1\n    const parsedIniFiles = results\n      .slice(GLOBAL_CONFIG_OFFSET) // skip the first one (global config)\n      .map((r, i) => {\n        if (r.status === 'fulfilled') {\n          return GitProjectConfigFileParser.parseGitProjectConfig(\n            r.value.toString(),\n            gitConfigFilePaths[i + GLOBAL_CONFIG_OFFSET]\n          )\n        }\n\n        return undefined\n      })\n      .filter(x => x !== undefined) as GitConfigInfo[] // remove any failed ones\n\n    // REMOVED FOR NOW\n    // now parse all the individual custom users from each config\n    //   response.allCustomUsers = parsedIniFiles\n    //     .filter(gitConfig => gitConfig.user?.email || gitConfig.user?.name)\n    //     .map(gitConfig => gitConfig.user)\n    //     .filter((value, index, self) => {\n    //       return (\n    //         self.findIndex(\n    //           v => v.email === value.email && v.name === value.name\n    //         ) === index\n    //       )\n    //     })\n\n    response.configList = parsedIniFiles\n\n    return response\n  }\n\n  static async getListOfPathsToGitConfigFiles(\n    scanStartPath: string,\n    homePath: string,\n    globalGitConfigFilePath: string\n  ) {\n    // eslint-disable-next-line prefer-const\n    let stdout = ''\n    // scan the file system for a list of files\n    await GitConfigFileSystemScanner.scanFileSystem(stdout, scanStartPath)\n    const mappedPaths = GitConfigPathToFilePathMapper.map(homePath, stdout)\n\n    // add the git global config file to the array\n    const gitConfigFilePaths = [globalGitConfigFilePath].concat(mappedPaths)\n\n    return gitConfigFilePaths\n  }\n\n  private static async scanFileSystem(stdout: string, scanStartPath: string) {\n    stdout = await spawnPromise(\n      'find',\n      [\n        '.',\n        '-type',\n        'd',\n        '(',\n        '-path',\n        './Library',\n        '-o',\n        '-path',\n        './.Trash',\n        '-o',\n        '-path',\n        './.config',\n        '-o',\n        '-path',\n        './.nuget',\n        '-o',\n        '-path',\n        './.vscode',\n        '-o',\n        '-path',\n        './.npm',\n        '-o',\n        '-path',\n        './development/flutter',\n        '-o',\n        '-path',\n        './Virtual Machines.localized',\n        '-o',\n        '-path',\n        './Applications',\n        '-o',\n        '-path',\n        './Movies',\n        '-o',\n        '-path',\n        './Music',\n        '-o',\n        '-path',\n        './Pictures',\n        '-o',\n        '-path',\n        './Public',\n        '-o',\n        '-path',\n        './.antigen',\n        '-o',\n        '-name',\n        'node_modules',\n        ')',\n        '-prune',\n        '-o',\n        '-name',\n        '.git',\n        '-print',\n      ],\n      scanStartPath\n    )\n    return stdout\n  }\n}\n"],"version":3}