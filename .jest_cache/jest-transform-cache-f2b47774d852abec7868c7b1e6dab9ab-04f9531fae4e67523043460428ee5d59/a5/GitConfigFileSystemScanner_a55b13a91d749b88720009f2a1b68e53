499fc67e2a7db718fc50b51141c64648
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const GitConfigPathToFilePathMapper_1 = require("./GitConfigPathToFilePathMapper");
const promises_1 = __importDefault(require("fs/promises"));
const SpawnPromise_1 = require("../../services/PromisifiedNodeUtilities/SpawnPromise");
const GitProjectConfigFileParser_1 = require("./GitProjectConfigFileParser");
const ApplicationSettingService_1 = require("../../appSettings/services/ApplicationSettingService");
const electron_1 = require("electron");
class GitConfigFileSystemScanner {
    static scan(scanStartPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = yield ApplicationSettingService_1.ApplicationSettingService.getSettings();
            const response = {
                configList: [],
                globalUser: undefined,
            };
            // check project path exists
            if (!fs_1.default.existsSync(scanStartPath)) {
                throw new Error(`Git Config file project directory not found (${scanStartPath})`);
            }
            // scan the project path for matching config files
            const gitConfigFilePaths = yield GitConfigFileSystemScanner.getListOfPathsToGitConfigFiles(scanStartPath, electron_1.app.getPath('home'), settings.globalGitConfigFile);
            // create promises for each file to get the contents
            const fileReadPromises = gitConfigFilePaths.map(fInfo => {
                return promises_1.default.readFile(fInfo);
            });
            // run all the promises to read file input
            const results = yield Promise.allSettled(fileReadPromises);
            // parse the user from the global config file as a special case
            if (results[0].status === 'fulfilled') {
                response.globalUser = GitProjectConfigFileParser_1.GitProjectConfigFileParser.parseGitUser(results[0].value.toString());
            }
            // parse all the project files skipping the first because it's
            // the global config, also add that offset to the file paths
            // in the response
            const GLOBAL_CONFIG_OFFSET = 1;
            const parsedIniFiles = results
                .slice(GLOBAL_CONFIG_OFFSET) // skip the first one (global config)
                .map((r, i) => {
                if (r.status === 'fulfilled') {
                    return GitProjectConfigFileParser_1.GitProjectConfigFileParser.parseGitProjectConfig(r.value.toString(), gitConfigFilePaths[i + GLOBAL_CONFIG_OFFSET]);
                }
                return undefined;
            })
                .filter(x => x !== undefined); // remove any failed ones
            // REMOVED FOR NOW
            // now parse all the individual custom users from each config
            //   response.allCustomUsers = parsedIniFiles
            //     .filter(gitConfig => gitConfig.user?.email || gitConfig.user?.name)
            //     .map(gitConfig => gitConfig.user)
            //     .filter((value, index, self) => {
            //       return (
            //         self.findIndex(
            //           v => v.email === value.email && v.name === value.name
            //         ) === index
            //       )
            //     })
            response.configList = parsedIniFiles;
            return response;
        });
    }
    static getListOfPathsToGitConfigFiles(scanStartPath, homePath, globalGitConfigFilePath) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line prefer-const
            let stdout = '';
            // scan the file system for a list of files
            yield GitConfigFileSystemScanner.scanFileSystem(stdout, scanStartPath);
            const mappedPaths = GitConfigPathToFilePathMapper_1.GitConfigPathToFilePathMapper.map(homePath, stdout);
            // add the git global config file to the array
            const gitConfigFilePaths = [globalGitConfigFilePath].concat(mappedPaths);
            return gitConfigFilePaths;
        });
    }
    static scanFileSystem(stdout, scanStartPath) {
        return __awaiter(this, void 0, void 0, function* () {
            stdout = yield (0, SpawnPromise_1.spawnPromise)('find', [
                '.',
                '-type',
                'd',
                '(',
                '-path',
                './Library',
                '-o',
                '-path',
                './.Trash',
                '-o',
                '-path',
                './.config',
                '-o',
                '-path',
                './.nuget',
                '-o',
                '-path',
                './.vscode',
                '-o',
                '-path',
                './.npm',
                '-o',
                '-path',
                './development/flutter',
                '-o',
                '-path',
                './Virtual Machines.localized',
                '-o',
                '-path',
                './Applications',
                '-o',
                '-path',
                './Movies',
                '-o',
                '-path',
                './Music',
                '-o',
                '-path',
                './Pictures',
                '-o',
                '-path',
                './Public',
                '-o',
                '-path',
                './.antigen',
                '-o',
                '-name',
                'node_modules',
                ')',
                '-prune',
                '-o',
                '-name',
                '.git',
                '-print',
            ], scanStartPath);
            return stdout;
        });
    }
}
exports.default = GitConfigFileSystemScanner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,