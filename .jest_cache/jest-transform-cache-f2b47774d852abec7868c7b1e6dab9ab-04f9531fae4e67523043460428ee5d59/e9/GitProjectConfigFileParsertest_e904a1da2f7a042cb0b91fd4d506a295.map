{"file":"/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/services/GitProjectConfigFileParser.test.ts","mappings":";;;;;;;;;;;AAAA,6EAAyE;AACzE,0GAAsG;AAItG,MAAM,kBAAkB,GAAG;;;;;;2CAMgB,CAAA;AAE3C,MAAM,eAAe,GAAG;;;;;;;;;;;;;;;4BAeI,CAAA;AAC5B,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,MAAM,GAAG,uDAA0B,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAA;QAC1E,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,kBAAkB;YACxB,KAAK,EAAE,qBAAqB;SAC7B,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,0BAA0B,EAAE,GAAS,EAAE;QACxC,mCAAmC;QACnC,oCAAoC;QACpC,iDAAiD;QACjD,KAAK;QACL,MAAM,MAAM,GAAG,MAAM,uDAA0B,CAAC,qBAAqB,CACnE,eAAe,EACf,2BAA2B,EAC3B,EAAE,CACH,CAAA;QACD,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC;YAC3B,wBAAwB,EAAE,UAAU;YACpC,IAAI,EAAE,2BAA2B;YACjC,OAAO,EAAE;gBACP;oBACE,KAAK,EAAE,iBAAiB;oBACxB,QAAQ,EAAE,+BAA+B;oBACzC,IAAI,EAAE,SAAS;oBACf,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,QAAQ;oBACpB,QAAQ,EAAE,UAAU;oBACpB,MAAM,EAAE,KAAK;oBACb,IAAI,EAAE,yCAAmB,CAAC,GAAG;oBAC7B,GAAG,EAAE,sCAAsC;oBAC3C,IAAI,EAAE,KAAK;iBACZ;aACF;YACD,IAAI,EAAE;gBACJ,IAAI,EAAE,kBAAkB;gBACxB,KAAK,EAAE,qBAAqB;aAC7B;SACF,CAAC,CAAA;IACJ,CAAC,CAAA,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/services/GitProjectConfigFileParser.test.ts"],"sourcesContent":["import { GitProjectConfigFileParser } from './GitProjectConfigFileParser'\nimport { GitProtocolTypeEnum } from '../../services/gitConfigSystemScanner/models/GitProtocolTypeEnum'\nimport { ApplicationSettingService } from '../../appSettings/services/ApplicationSettingService'\nimport { ApplicationSettings } from '../../appSettings/models/ApplicationSettings'\n\nconst sampleGlobalConfig = `[user]\nname = Darragh ORiordan\nemail = darragh@emailer.com\n[core]\nexcludesfile = /Users/darragh/.gitignore_global\neditor = nano -w\npager = diff-so-fancy | less --tabs=4 -RFX`\n\nconst sampleSshConfig = `[core]\nrepositoryformatversion = 0\nfilemode = true\nbare = false\nlogallrefupdates = true\nignorecase = true\nprecomposeunicode = true\n[remote \"origin\"]\nurl = git@pgh:darraghoriordan/ssh-tool.git\nfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\nremote = origin\nmerge = refs/heads/master\n[user]\nname = Darragh ORiordan\nemail = darragh@emailer.com`\ndescribe('GitProjectConfigFileParser', () => {\n  it('can parse global config', () => {\n    const result = GitProjectConfigFileParser.parseGitUser(sampleGlobalConfig)\n    expect(result).toMatchObject({\n      name: 'Darragh ORiordan',\n      email: 'darragh@emailer.com',\n    })\n  })\n\n  it('can parse ssh git config', async () => {\n    // ApplicationSettingService.init({\n    //   settingsFilePath: '/some/path',\n    //   overrideSettings: new ApplicationSettings(),\n    // })\n    const result = await GitProjectConfigFileParser.parseGitProjectConfig(\n      sampleSshConfig,\n      '/Users/darragh/gitproject',\n      []\n    )\n    expect(result).toMatchObject({\n      originRepositoryFileName: 'ssh-tool',\n      path: '/Users/darragh/gitproject',\n      remotes: [\n        {\n          owner: 'darraghoriordan',\n          pathname: '/darraghoriordan/ssh-tool.git',\n          port: undefined,\n          protocol: 'ssh',\n          remoteName: 'origin',\n          repoName: 'ssh-tool',\n          source: 'pgh',\n          type: GitProtocolTypeEnum.SSH,\n          url: 'git@pgh:darraghoriordan/ssh-tool.git',\n          user: 'git',\n        },\n      ],\n      user: {\n        name: 'Darragh ORiordan',\n        email: 'darragh@emailer.com',\n      },\n    })\n  })\n})\n"],"version":3}