922fefc8ae284258dfaafd8a7d22b722
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitConfigFileCacheService = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const class_transformer_1 = require("class-transformer");
const GitConfigFileListCacheModel_1 = require("../models/GitConfigFileListCacheModel");
class GitConfigFileCacheService {
    static init({ gitConfigurationCacheFilePath, }) {
        this.gitConfigCachePath = gitConfigurationCacheFilePath;
    }
    static loadFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const buffer = yield promises_1.default.readFile(GitConfigFileCacheService.gitConfigCachePath);
                return GitConfigFileCacheService.transformToInstance(buffer.toString());
            }
            catch (error) {
                console.log(`Error when reading file ${GitConfigFileCacheService.gitConfigCachePath}. Will return new instance instead.`, error);
                const emptyResult = new GitConfigFileListCacheModel_1.GitConfigFileListCacheModel();
                emptyResult.configList = [];
                return emptyResult;
            }
        });
    }
    static transformToInstance(rawObject) {
        const settingsInstance = (0, class_transformer_1.plainToInstance)(GitConfigFileListCacheModel_1.GitConfigFileListCacheModel, JSON.parse(rawObject));
        return settingsInstance;
    }
    static saveFile(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return promises_1.default.writeFile(GitConfigFileCacheService.gitConfigCachePath, JSON.stringify((0, class_transformer_1.instanceToPlain)(data)));
        });
    }
    static deleteFile() {
        return __awaiter(this, void 0, void 0, function* () {
            return promises_1.default.rm(GitConfigFileCacheService.gitConfigCachePath, { force: true });
        });
    }
}
exports.GitConfigFileCacheService = GitConfigFileCacheService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhcnJhZ2hvcmlvcmRhbi9Eb2N1bWVudHMvcGVyc29uYWwtcHJvamVjdHMvc3NoLXRvb2wtbmV3LWVsZWN0cm9uL3NyYy9lbGVjdHJvbi9naXRDb25maWd1cmF0aW9ucy9zZXJ2aWNlcy9HaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJEQUE2QjtBQUM3Qix5REFBb0U7QUFDcEUsdUZBQW1GO0FBRW5GLE1BQWEseUJBQXlCO0lBR3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDViw2QkFBNkIsR0FHOUI7UUFDQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsNkJBQTZCLENBQUE7SUFDekQsQ0FBQztJQUVELE1BQU0sQ0FBTyxRQUFROztZQUNuQixJQUFJO2dCQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQUcsQ0FBQyxRQUFRLENBQy9CLHlCQUF5QixDQUFDLGtCQUFrQixDQUM3QyxDQUFBO2dCQUVELE9BQU8seUJBQXlCLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7YUFDeEU7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxPQUFPLENBQUMsR0FBRyxDQUNULDJCQUEyQix5QkFBeUIsQ0FBQyxrQkFBa0IscUNBQXFDLEVBQzVHLEtBQUssQ0FDTixDQUFBO2dCQUNELE1BQU0sV0FBVyxHQUFHLElBQUkseURBQTJCLEVBQUUsQ0FBQTtnQkFDckQsV0FBVyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUE7Z0JBQzNCLE9BQU8sV0FBVyxDQUFBO2FBQ25CO1FBQ0gsQ0FBQztLQUFBO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQWlCO1FBQzFDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBQSxtQ0FBZSxFQUN0Qyx5REFBMkIsRUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FDdEIsQ0FBQTtRQUNELE9BQU8sZ0JBQWdCLENBQUE7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBTyxRQUFRLENBQUMsSUFBaUM7O1lBQ3JELE9BQU8sa0JBQUcsQ0FBQyxTQUFTLENBQ2xCLHlCQUF5QixDQUFDLGtCQUFrQixFQUM1QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUEsbUNBQWUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUN0QyxDQUFBO1FBQ0gsQ0FBQztLQUFBO0lBRUQsTUFBTSxDQUFPLFVBQVU7O1lBQ3JCLE9BQU8sa0JBQUcsQ0FBQyxFQUFFLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUM5RSxDQUFDO0tBQUE7Q0FDRjtBQS9DRCw4REErQ0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2RhcnJhZ2hvcmlvcmRhbi9Eb2N1bWVudHMvcGVyc29uYWwtcHJvamVjdHMvc3NoLXRvb2wtbmV3LWVsZWN0cm9uL3NyYy9lbGVjdHJvbi9naXRDb25maWd1cmF0aW9ucy9zZXJ2aWNlcy9HaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnXG5pbXBvcnQgeyBpbnN0YW5jZVRvUGxhaW4sIHBsYWluVG9JbnN0YW5jZSB9IGZyb20gJ2NsYXNzLXRyYW5zZm9ybWVyJ1xuaW1wb3J0IHsgR2l0Q29uZmlnRmlsZUxpc3RDYWNoZU1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL0dpdENvbmZpZ0ZpbGVMaXN0Q2FjaGVNb2RlbCdcblxuZXhwb3J0IGNsYXNzIEdpdENvbmZpZ0ZpbGVDYWNoZVNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyBnaXRDb25maWdDYWNoZVBhdGg6IHN0cmluZ1xuXG4gIHN0YXRpYyBpbml0KHtcbiAgICBnaXRDb25maWd1cmF0aW9uQ2FjaGVGaWxlUGF0aCxcbiAgfToge1xuICAgIGdpdENvbmZpZ3VyYXRpb25DYWNoZUZpbGVQYXRoOiBzdHJpbmdcbiAgfSk6IHZvaWQge1xuICAgIHRoaXMuZ2l0Q29uZmlnQ2FjaGVQYXRoID0gZ2l0Q29uZmlndXJhdGlvbkNhY2hlRmlsZVBhdGhcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBsb2FkRmlsZSgpOiBQcm9taXNlPEdpdENvbmZpZ0ZpbGVMaXN0Q2FjaGVNb2RlbD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBmc3AucmVhZEZpbGUoXG4gICAgICAgIEdpdENvbmZpZ0ZpbGVDYWNoZVNlcnZpY2UuZ2l0Q29uZmlnQ2FjaGVQYXRoXG4gICAgICApXG5cbiAgICAgIHJldHVybiBHaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLnRyYW5zZm9ybVRvSW5zdGFuY2UoYnVmZmVyLnRvU3RyaW5nKCkpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgRXJyb3Igd2hlbiByZWFkaW5nIGZpbGUgJHtHaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLmdpdENvbmZpZ0NhY2hlUGF0aH0uIFdpbGwgcmV0dXJuIG5ldyBpbnN0YW5jZSBpbnN0ZWFkLmAsXG4gICAgICAgIGVycm9yXG4gICAgICApXG4gICAgICBjb25zdCBlbXB0eVJlc3VsdCA9IG5ldyBHaXRDb25maWdGaWxlTGlzdENhY2hlTW9kZWwoKVxuICAgICAgZW1wdHlSZXN1bHQuY29uZmlnTGlzdCA9IFtdXG4gICAgICByZXR1cm4gZW1wdHlSZXN1bHRcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdHJhbnNmb3JtVG9JbnN0YW5jZShyYXdPYmplY3Q6IHN0cmluZyk6IEdpdENvbmZpZ0ZpbGVMaXN0Q2FjaGVNb2RlbCB7XG4gICAgY29uc3Qgc2V0dGluZ3NJbnN0YW5jZSA9IHBsYWluVG9JbnN0YW5jZShcbiAgICAgIEdpdENvbmZpZ0ZpbGVMaXN0Q2FjaGVNb2RlbCxcbiAgICAgIEpTT04ucGFyc2UocmF3T2JqZWN0KVxuICAgIClcbiAgICByZXR1cm4gc2V0dGluZ3NJbnN0YW5jZVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNhdmVGaWxlKGRhdGE6IEdpdENvbmZpZ0ZpbGVMaXN0Q2FjaGVNb2RlbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBmc3Aud3JpdGVGaWxlKFxuICAgICAgR2l0Q29uZmlnRmlsZUNhY2hlU2VydmljZS5naXRDb25maWdDYWNoZVBhdGgsXG4gICAgICBKU09OLnN0cmluZ2lmeShpbnN0YW5jZVRvUGxhaW4oZGF0YSkpXG4gICAgKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGRlbGV0ZUZpbGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIGZzcC5ybShHaXRDb25maWdGaWxlQ2FjaGVTZXJ2aWNlLmdpdENvbmZpZ0NhY2hlUGF0aCwgeyBmb3JjZTogdHJ1ZSB9KVxuICB9XG59XG4iXSwidmVyc2lvbiI6M30=