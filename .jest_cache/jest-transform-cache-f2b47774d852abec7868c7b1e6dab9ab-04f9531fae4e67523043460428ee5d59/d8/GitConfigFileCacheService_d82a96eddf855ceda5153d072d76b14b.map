{"file":"/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/services/GitConfigFileCacheService.ts","mappings":";;;;;;;;;;;;;;;AAAA,2DAA6B;AAC7B,yDAAoE;AACpE,uFAAmF;AAEnF,MAAa,yBAAyB;IAGpC,MAAM,CAAC,IAAI,CAAC,EACV,6BAA6B,GAG9B;QACC,IAAI,CAAC,kBAAkB,GAAG,6BAA6B,CAAA;IACzD,CAAC;IAED,MAAM,CAAO,QAAQ;;YACnB,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,kBAAG,CAAC,QAAQ,CAC/B,yBAAyB,CAAC,kBAAkB,CAC7C,CAAA;gBAED,OAAO,yBAAyB,CAAC,mBAAmB,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAA;aACxE;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,GAAG,CACT,2BAA2B,yBAAyB,CAAC,kBAAkB,qCAAqC,EAC5G,KAAK,CACN,CAAA;gBACD,MAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAA;gBACrD,WAAW,CAAC,UAAU,GAAG,EAAE,CAAA;gBAC3B,OAAO,WAAW,CAAA;aACnB;QACH,CAAC;KAAA;IAED,MAAM,CAAC,mBAAmB,CAAC,SAAiB;QAC1C,MAAM,gBAAgB,GAAG,IAAA,mCAAe,EACtC,yDAA2B,EAC3B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CACtB,CAAA;QACD,OAAO,gBAAgB,CAAA;IACzB,CAAC;IAED,MAAM,CAAO,QAAQ,CAAC,IAAiC;;YACrD,OAAO,kBAAG,CAAC,SAAS,CAClB,yBAAyB,CAAC,kBAAkB,EAC5C,IAAI,CAAC,SAAS,CAAC,IAAA,mCAAe,EAAC,IAAI,CAAC,CAAC,CACtC,CAAA;QACH,CAAC;KAAA;IAED,MAAM,CAAO,UAAU;;YACrB,OAAO,kBAAG,CAAC,EAAE,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;QAC9E,CAAC;KAAA;CACF;AA/CD,8DA+CC","names":[],"sources":["/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/gitConfigurations/services/GitConfigFileCacheService.ts"],"sourcesContent":["import fsp from 'fs/promises'\nimport { instanceToPlain, plainToInstance } from 'class-transformer'\nimport { GitConfigFileListCacheModel } from '../models/GitConfigFileListCacheModel'\n\nexport class GitConfigFileCacheService {\n  private static gitConfigCachePath: string\n\n  static init({\n    gitConfigurationCacheFilePath,\n  }: {\n    gitConfigurationCacheFilePath: string\n  }): void {\n    this.gitConfigCachePath = gitConfigurationCacheFilePath\n  }\n\n  static async loadFile(): Promise<GitConfigFileListCacheModel> {\n    try {\n      const buffer = await fsp.readFile(\n        GitConfigFileCacheService.gitConfigCachePath\n      )\n\n      return GitConfigFileCacheService.transformToInstance(buffer.toString())\n    } catch (error) {\n      console.log(\n        `Error when reading file ${GitConfigFileCacheService.gitConfigCachePath}. Will return new instance instead.`,\n        error\n      )\n      const emptyResult = new GitConfigFileListCacheModel()\n      emptyResult.configList = []\n      return emptyResult\n    }\n  }\n\n  static transformToInstance(rawObject: string): GitConfigFileListCacheModel {\n    const settingsInstance = plainToInstance(\n      GitConfigFileListCacheModel,\n      JSON.parse(rawObject)\n    )\n    return settingsInstance\n  }\n\n  static async saveFile(data: GitConfigFileListCacheModel): Promise<void> {\n    return fsp.writeFile(\n      GitConfigFileCacheService.gitConfigCachePath,\n      JSON.stringify(instanceToPlain(data))\n    )\n  }\n\n  static async deleteFile(): Promise<void> {\n    return fsp.rm(GitConfigFileCacheService.gitConfigCachePath, { force: true })\n  }\n}\n"],"version":3}