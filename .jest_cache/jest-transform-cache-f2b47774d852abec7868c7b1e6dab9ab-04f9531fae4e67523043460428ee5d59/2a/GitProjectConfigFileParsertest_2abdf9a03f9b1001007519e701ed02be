70bab32efec3030ebac69dac2efa280a
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GitProjectConfigFileParser_1 = require("./GitProjectConfigFileParser");
const GitProtocolTypeEnum_1 = require("../../services/gitConfigSystemScanner/models/GitProtocolTypeEnum");
const ApplicationSettingService_1 = require("../../appSettings/services/ApplicationSettingService");
const ApplicationSettings_1 = require("../../appSettings/models/ApplicationSettings");
const sampleGlobalConfig = `[user]
name = Darragh ORiordan
email = darragh@emailer.com
[core]
excludesfile = /Users/darragh/.gitignore_global
editor = nano -w
pager = diff-so-fancy | less --tabs=4 -RFX`;
const sampleSshConfig = `[core]
repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
ignorecase = true
precomposeunicode = true
[remote "origin"]
url = git@pgh:darraghoriordan/ssh-tool.git
fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
remote = origin
merge = refs/heads/master
[user]
name = Darragh ORiordan
email = darragh@emailer.com`;
describe('GitProjectConfigFileParser', () => {
    it('can parse global config', () => {
        const result = GitProjectConfigFileParser_1.GitProjectConfigFileParser.parseGitUser(sampleGlobalConfig);
        expect(result).toMatchObject({
            name: 'Darragh ORiordan',
            email: 'darragh@emailer.com',
        });
    });
    it('can parse ssh git config', () => __awaiter(void 0, void 0, void 0, function* () {
        ApplicationSettingService_1.ApplicationSettingService.init({
            settingsFilePath: '/some/path',
            overrideSettings: new ApplicationSettings_1.ApplicationSettings(),
        });
        const result = yield GitProjectConfigFileParser_1.GitProjectConfigFileParser.parseGitProjectConfig(sampleSshConfig, '/Users/darragh/gitproject');
        expect(result).toMatchObject({
            originRepositoryFileName: 'ssh-tool',
            path: '/Users/darragh/gitproject',
            remotes: [
                {
                    owner: 'darraghoriordan',
                    pathname: '/darraghoriordan/ssh-tool.git',
                    port: undefined,
                    protocol: 'ssh',
                    remoteName: 'origin',
                    repoName: 'ssh-tool',
                    source: 'pgh',
                    type: GitProtocolTypeEnum_1.GitProtocolTypeEnum.SSH,
                    url: 'git@pgh:darraghoriordan/ssh-tool.git',
                    user: 'git',
                },
            ],
            user: {
                name: 'Darragh ORiordan',
                email: 'darragh@emailer.com',
            },
        });
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhcnJhZ2hvcmlvcmRhbi9Eb2N1bWVudHMvcGVyc29uYWwtcHJvamVjdHMvc3NoLXRvb2wtbmV3LWVsZWN0cm9uL3NyYy9lbGVjdHJvbi9naXRDb25maWd1cmF0aW9ucy9zZXJ2aWNlcy9HaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsNkVBQXlFO0FBQ3pFLDBHQUFzRztBQUN0RyxvR0FBZ0c7QUFDaEcsc0ZBQWtGO0FBRWxGLE1BQU0sa0JBQWtCLEdBQUc7Ozs7OzsyQ0FNZ0IsQ0FBQTtBQUUzQyxNQUFNLGVBQWUsR0FBRzs7Ozs7Ozs7Ozs7Ozs7OzRCQWVJLENBQUE7QUFDNUIsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUMxQyxFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLHVEQUEwQixDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQzFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixLQUFLLEVBQUUscUJBQXFCO1NBQzdCLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQVMsRUFBRTtRQUN4QyxxREFBeUIsQ0FBQyxJQUFJLENBQUM7WUFDN0IsZ0JBQWdCLEVBQUUsWUFBWTtZQUM5QixnQkFBZ0IsRUFBRSxJQUFJLHlDQUFtQixFQUFFO1NBQzVDLENBQUMsQ0FBQTtRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sdURBQTBCLENBQUMscUJBQXFCLENBQ25FLGVBQWUsRUFDZiwyQkFBMkIsQ0FDNUIsQ0FBQTtRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDM0Isd0JBQXdCLEVBQUUsVUFBVTtZQUNwQyxJQUFJLEVBQUUsMkJBQTJCO1lBQ2pDLE9BQU8sRUFBRTtnQkFDUDtvQkFDRSxLQUFLLEVBQUUsaUJBQWlCO29CQUN4QixRQUFRLEVBQUUsK0JBQStCO29CQUN6QyxJQUFJLEVBQUUsU0FBUztvQkFDZixRQUFRLEVBQUUsS0FBSztvQkFDZixVQUFVLEVBQUUsUUFBUTtvQkFDcEIsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLE1BQU0sRUFBRSxLQUFLO29CQUNiLElBQUksRUFBRSx5Q0FBbUIsQ0FBQyxHQUFHO29CQUM3QixHQUFHLEVBQUUsc0NBQXNDO29CQUMzQyxJQUFJLEVBQUUsS0FBSztpQkFDWjthQUNGO1lBQ0QsSUFBSSxFQUFFO2dCQUNKLElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLEtBQUssRUFBRSxxQkFBcUI7YUFDN0I7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUEsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2RhcnJhZ2hvcmlvcmRhbi9Eb2N1bWVudHMvcGVyc29uYWwtcHJvamVjdHMvc3NoLXRvb2wtbmV3LWVsZWN0cm9uL3NyYy9lbGVjdHJvbi9naXRDb25maWd1cmF0aW9ucy9zZXJ2aWNlcy9HaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdpdFByb2plY3RDb25maWdGaWxlUGFyc2VyIH0gZnJvbSAnLi9HaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlcidcbmltcG9ydCB7IEdpdFByb3RvY29sVHlwZUVudW0gfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9naXRDb25maWdTeXN0ZW1TY2FubmVyL21vZGVscy9HaXRQcm90b2NvbFR5cGVFbnVtJ1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZXR0aW5nU2VydmljZSB9IGZyb20gJy4uLy4uL2FwcFNldHRpbmdzL3NlcnZpY2VzL0FwcGxpY2F0aW9uU2V0dGluZ1NlcnZpY2UnXG5pbXBvcnQgeyBBcHBsaWNhdGlvblNldHRpbmdzIH0gZnJvbSAnLi4vLi4vYXBwU2V0dGluZ3MvbW9kZWxzL0FwcGxpY2F0aW9uU2V0dGluZ3MnXG5cbmNvbnN0IHNhbXBsZUdsb2JhbENvbmZpZyA9IGBbdXNlcl1cbm5hbWUgPSBEYXJyYWdoIE9SaW9yZGFuXG5lbWFpbCA9IGRhcnJhZ2hAZW1haWxlci5jb21cbltjb3JlXVxuZXhjbHVkZXNmaWxlID0gL1VzZXJzL2RhcnJhZ2gvLmdpdGlnbm9yZV9nbG9iYWxcbmVkaXRvciA9IG5hbm8gLXdcbnBhZ2VyID0gZGlmZi1zby1mYW5jeSB8IGxlc3MgLS10YWJzPTQgLVJGWGBcblxuY29uc3Qgc2FtcGxlU3NoQ29uZmlnID0gYFtjb3JlXVxucmVwb3NpdG9yeWZvcm1hdHZlcnNpb24gPSAwXG5maWxlbW9kZSA9IHRydWVcbmJhcmUgPSBmYWxzZVxubG9nYWxscmVmdXBkYXRlcyA9IHRydWVcbmlnbm9yZWNhc2UgPSB0cnVlXG5wcmVjb21wb3NldW5pY29kZSA9IHRydWVcbltyZW1vdGUgXCJvcmlnaW5cIl1cbnVybCA9IGdpdEBwZ2g6ZGFycmFnaG9yaW9yZGFuL3NzaC10b29sLmdpdFxuZmV0Y2ggPSArcmVmcy9oZWFkcy8qOnJlZnMvcmVtb3Rlcy9vcmlnaW4vKlxuW2JyYW5jaCBcIm1hc3RlclwiXVxucmVtb3RlID0gb3JpZ2luXG5tZXJnZSA9IHJlZnMvaGVhZHMvbWFzdGVyXG5bdXNlcl1cbm5hbWUgPSBEYXJyYWdoIE9SaW9yZGFuXG5lbWFpbCA9IGRhcnJhZ2hAZW1haWxlci5jb21gXG5kZXNjcmliZSgnR2l0UHJvamVjdENvbmZpZ0ZpbGVQYXJzZXInLCAoKSA9PiB7XG4gIGl0KCdjYW4gcGFyc2UgZ2xvYmFsIGNvbmZpZycsICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBHaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlci5wYXJzZUdpdFVzZXIoc2FtcGxlR2xvYmFsQ29uZmlnKVxuICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgbmFtZTogJ0RhcnJhZ2ggT1Jpb3JkYW4nLFxuICAgICAgZW1haWw6ICdkYXJyYWdoQGVtYWlsZXIuY29tJyxcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdjYW4gcGFyc2Ugc3NoIGdpdCBjb25maWcnLCBhc3luYyAoKSA9PiB7XG4gICAgQXBwbGljYXRpb25TZXR0aW5nU2VydmljZS5pbml0KHtcbiAgICAgIHNldHRpbmdzRmlsZVBhdGg6ICcvc29tZS9wYXRoJyxcbiAgICAgIG92ZXJyaWRlU2V0dGluZ3M6IG5ldyBBcHBsaWNhdGlvblNldHRpbmdzKCksXG4gICAgfSlcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBHaXRQcm9qZWN0Q29uZmlnRmlsZVBhcnNlci5wYXJzZUdpdFByb2plY3RDb25maWcoXG4gICAgICBzYW1wbGVTc2hDb25maWcsXG4gICAgICAnL1VzZXJzL2RhcnJhZ2gvZ2l0cHJvamVjdCdcbiAgICApXG4gICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdCh7XG4gICAgICBvcmlnaW5SZXBvc2l0b3J5RmlsZU5hbWU6ICdzc2gtdG9vbCcsXG4gICAgICBwYXRoOiAnL1VzZXJzL2RhcnJhZ2gvZ2l0cHJvamVjdCcsXG4gICAgICByZW1vdGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBvd25lcjogJ2RhcnJhZ2hvcmlvcmRhbicsXG4gICAgICAgICAgcGF0aG5hbWU6ICcvZGFycmFnaG9yaW9yZGFuL3NzaC10b29sLmdpdCcsXG4gICAgICAgICAgcG9ydDogdW5kZWZpbmVkLFxuICAgICAgICAgIHByb3RvY29sOiAnc3NoJyxcbiAgICAgICAgICByZW1vdGVOYW1lOiAnb3JpZ2luJyxcbiAgICAgICAgICByZXBvTmFtZTogJ3NzaC10b29sJyxcbiAgICAgICAgICBzb3VyY2U6ICdwZ2gnLFxuICAgICAgICAgIHR5cGU6IEdpdFByb3RvY29sVHlwZUVudW0uU1NILFxuICAgICAgICAgIHVybDogJ2dpdEBwZ2g6ZGFycmFnaG9yaW9yZGFuL3NzaC10b29sLmdpdCcsXG4gICAgICAgICAgdXNlcjogJ2dpdCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdXNlcjoge1xuICAgICAgICBuYW1lOiAnRGFycmFnaCBPUmlvcmRhbicsXG4gICAgICAgIGVtYWlsOiAnZGFycmFnaEBlbWFpbGVyLmNvbScsXG4gICAgICB9LFxuICAgIH0pXG4gIH0pXG59KVxuIl0sInZlcnNpb24iOjN9