{"file":"/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/services/sshConfigFile/SshConfigFileLoader.ts","mappings":";;;;;;;;;;;;;;;AAAA,wFAA+D;AAC/D,+DAA0E;AAC1E,oGAAgG;AAEhG,MAAa,mBAAmB;IAC9B,MAAM,CAAO,IAAI;;YACf,MAAM,QAAQ,GAAG,MAAM,qDAAyB,CAAC,WAAW,EAAE,CAAA;YAC9D,MAAM,WAAW,GAAG,QAAQ,CAAC,iBAAiB,CAAA;YAE9C,MAAM,eAAe,GAAG,iCAAuB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAA;YAEzE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAA;aACtD;YAED,oEAAoE;YACpE,OAAO,yCAAmB,CAAC,kBAAkB,CAAC,eAAe,CAAC,QAAS,CAAC,CAAA;QAC1E,CAAC;KAAA;CACF;AAdD,kDAcC","names":[],"sources":["/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/services/sshConfigFile/SshConfigFileLoader.ts"],"sourcesContent":["import SshConfigFileDiskLoader from './SshConfigFileDiskLoader'\nimport { AvailableHost, SshConfigFileParser } from './SshConfigFileParser'\nimport { ApplicationSettingService } from '../../appSettings/services/ApplicationSettingService'\n\nexport class SshConfigFileLoader {\n  static async load(): Promise<AvailableHost[]> {\n    const settings = await ApplicationSettingService.getSettings()\n    const sshFilePath = settings.sshConfigFilePath\n\n    const rawFileContents = SshConfigFileDiskLoader.loadFromPath(sshFilePath)\n\n    if (!rawFileContents.found) {\n      throw new Error(\"Couldn't parse the ssh config file\")\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return SshConfigFileParser.parseValidSshHosts(rawFileContents.contents!)\n  }\n}\n"],"version":3}