{"file":"/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/appSettings/services/ApplicationSettingService.ts","mappings":"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","names":[],"sources":["/Users/darraghoriordan/Documents/personal-projects/ssh-tool-new-electron/src/electron/appSettings/services/ApplicationSettingService.ts"],"sourcesContent":["import fsp from 'fs/promises'\nimport fs from 'fs'\nimport os from 'os'\nimport { instanceToPlain, plainToInstance } from 'class-transformer'\nimport { ApplicationSettings } from '../models/ApplicationSettings'\nimport { DefaultSettingsMac } from '../models/DefaultSettingsMac'\nimport { DefaultSettingsLinux } from '../models/DefaultSettingsLinux'\nimport { DefaultSettingsWindows } from '../models/DefaultSettingsWindows'\nimport { validate } from 'class-validator'\n\nexport class ApplicationSettingService {\n  static filePath: string\n\n  private static loadedSettings: ApplicationSettings | undefined\n\n  static init({\n    settingsFilePath,\n    overrideSettings,\n  }: {\n    settingsFilePath: string\n    overrideSettings?: ApplicationSettings\n  }): void {\n    this.filePath = settingsFilePath\n    if (overrideSettings) {\n      this.loadedSettings = overrideSettings\n    }\n  }\n\n  static async getSettings(): Promise<ApplicationSettings> {\n    if (this.loadedSettings === undefined) {\n      this.loadedSettings = await this.loadFile(this.filePath)\n    }\n\n    return this.loadedSettings\n  }\n\n  static async loadFile(path: string): Promise<ApplicationSettings> {\n    console.log(\n      `loading settings file path ${ApplicationSettingService.filePath}`\n    )\n    // trying to catch the error on promises readFile still throws for some reason\n    // so using this instead\n    if (!fs.existsSync(path)) {\n      const settingsInstance = this.getDefaultSettings()\n      this.saveFile(settingsInstance)\n\n      return settingsInstance\n    }\n\n    const fileUtf8 = await fsp.readFile(path, { encoding: 'utf-8' })\n\n    const settingsInstance = plainToInstance(\n      ApplicationSettings,\n      JSON.parse(fileUtf8)\n    )\n    return settingsInstance\n  }\n\n  static getDefaultSettings():\n    | DefaultSettingsLinux\n    | DefaultSettingsMac\n    | DefaultSettingsWindows {\n    const defaultSettings = [\n      new DefaultSettingsMac(),\n      new DefaultSettingsWindows(),\n      new DefaultSettingsLinux(),\n    ]\n\n    const defaultSettingsInstance = defaultSettings.find(\n      x => x.platformMatcher === os.platform()\n    )\n    if (defaultSettingsInstance === undefined) {\n      throw new Error(\n        \"Couldn't find application configuration to run on current platform. Only mac, windows and linux supported.\"\n      )\n    }\n\n    return defaultSettingsInstance\n  }\n\n  static async saveFile(settings: ApplicationSettings): Promise<void> {\n    console.log(\n      `saving settings file path ${ApplicationSettingService.filePath}`,\n      settings\n    )\n\n    // would probably want to validate the settings here\n    //validateOrReject(settings)\n    const validationErrors = await validate(\n      plainToInstance(ApplicationSettings, settings)\n    )\n    if (validationErrors && validationErrors.length > 0) {\n      const errors = validationErrors.map(v => v.toString())\n      throw new Error(`The settings are invalid. ${''.concat(...errors)}`)\n    }\n    console.log('validation errors', validationErrors)\n    await fsp.writeFile(\n      this.filePath,\n      JSON.stringify(instanceToPlain(settings))\n    )\n\n    this.loadedSettings = settings\n  }\n\n  static async deleteFile(): Promise<void> {\n    console.log(\n      `deleting settings file path ${ApplicationSettingService.filePath}`\n    )\n    await fsp.rm(this.filePath, { force: true })\n    this.loadedSettings = undefined\n  }\n}\n"],"version":3}