[93m[0m[93mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
[93mmodified: src/app/DevHistory/ReactQueryWrappers.ts
[93mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
[1;35m@ src/app/DevHistory/ReactQueryWrappers.ts:17 @[1m[1;38;5;146m export function useDevHistoryGetDay({ date }: { date: Date }) {[0m
        date: date,[m
      })[m
    },[m
[7m[1;32m [m
    {[m
[1;32m[1;32m[m[1;32m      // never invalidate[m[0m
[1;32m[1;32m[m[1;32m      staleTime: Infinity,[m[0m
[1;32m[1;32m[m[1;32m      retry: 0,[m[0m
[1;32m[1;32m[m[1;32m      refetchOnWindowFocus: false,[m[0m
      // eslint-disable-next-line @typescript-eslint/no-explicit-any[m
      onError: (error: any) => {[m
        logAMessage({ message: error.message, level: 'error' })[m
[93m[0m[93mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
[93mmodified: src/electron/devHistory/services/git-repository-history.ts
[93mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
[1;35m@ src/electron/devHistory/services/git-repository-history.ts:32 @[1m[1;38;5;146m export async function readGitHistory({[0m
[m
    try {[m
      // Fetch all commits in the repository for the date range[m
[1;31m[1;31m      const [m[1;31;48;5;52mcommitsInDateRange = await git.log([m[1;31m[[m[0m
[1;32m[1;32m      const [m[1;32;48;5;22mlogParams = [m[1;32m[[m[0m
        `--since='${startDate.toISOString()}'`,[m
[1;31m[1;31m        `--to='${endDate.toISOString()}'`,[m[0m
[1;31m[1;31m      ])[m[0m
[1;32m[1;32m[m[1;32m        `--until='${endDate.toISOString()}'`,[m[0m
[1;32m[1;32m[m[1;32m      ][m[0m
[1;32m[1;32m[m[1;32m      console.log('logParams', logParams.join(' '))[m[0m
[1;32m[1;32m[m[1;32m      const commitsInDateRange = await git.log(logParams)[m[0m
[m
      if (commitsInDateRange.total === 0) {[m
        return [][m
[1;35m@ src/electron/devHistory/services/git-repository-history.ts:45 @[1m[1;38;5;146m export async function readGitHistory({[0m
      const commitAndDiffs: GitCommitHistoryEntry[] = [][m
      // Get the diffs for each commit in the date range[m
      for (const commit of commitsInDateRange.all) {[m
[1;31m[1;31m        const commitDiff = await git.diff([commit.hash])[m[0m
[1;31m[1;31m        const filenames = await git.diff(['--name-only', commit.hash])[m[0m
[1;32m[1;32m[m[1;32m        console.log('commit', commit)[m[0m
[1;32m[1;32m[m[1;32m        const commitDiff = await git.raw(['diff', commit.hash, '-p'])[m[0m
[1;32m[1;32m[m[1;32m        const filenames = await git.raw(['diff', commit.hash, '--name-only'])[m[0m
        commitAndDiffs.push({[m
          type: 'git commit',[m
          date: new Date(commit.date),[m
          metadata: {[m
            diff: commitDiff,[m
            message: commit.message,[m
[1;31m[1;31m            fileNames: filenames.split('\n'),[m[0m
[1;32m[1;32m[m[1;32m            fileNames: filenames[m[0m
[1;32m[1;32m[m[1;32m              .split('\n')[m[0m
[1;32m[1;32m[m[1;32m              .filter(Boolean)[m[0m
[1;32m[1;32m[m[1;32m              .map(f => f.trim()),[m[0m
          },[m
        })[m
      }[m
[m
      return commitAndDiffs[m
[1;32m[1;32m[m[1;32m      // eslint-disable-next-line @typescript-eslint/no-explicit-any[m[0m
    } catch (error: any) {[m
      throw new Error(`Error fetching commit diffs: ${error.message}`)[m
    }[m
